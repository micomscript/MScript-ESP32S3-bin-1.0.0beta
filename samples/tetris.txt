/*
 *	tetris
 *  programmed by Nagamoto
 */

pinMode(34,"INPUT")
pinMode(35,"INPUT")

var block
var block_state = 0 //0 〜 6
var color
var block_x,block_y
var block_x_state,block_y_state

var collision_flag
var block_flag
var gameover_flag
var clear_flag
var move_flag
var time_flag

var block_O = [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
var block_I = [[0,2,0,0],[0,2,0,0],[0,2,0,0],[0,2,0,0]]
var block_T = [[0,0,0,0],[0,3,0,0],[3,3,3,0],[0,0,0,0]]
var block_L = [[0,0,0,0],[0,4,0,0],[0,4,0,0],[0,4,4,0]]
var block_J = [[0,0,0,0],[0,0,5,0],[0,0,5,0],[0,5,5,0]]
var block_S = [[0,0,0,0],[0,6,6,0],[6,6,0,0],[0,0,0,0]]
var block_Z = [[0,0,0,0],[7,7,0,0],[0,7,7,0],[0,0,0,0]]

var blocks = [block_O,block_I,block_T,block_L,block_J,block_S,block_Z]

var colors = [0xffe0,0x07ff,0x901a,0xfd20,0x001f,0x07e0,0xf800]

var field = []
var clear_line_point = []

var time = 0

function init(){
	clearScreen()
	srand(time())
	var i,j
	repeat(i = 0,22){
		field[i] = []
		repeat(j = 0,15){
			if((i > 19 )||(j < 3)||(j > 12)) field[i][j] =9
			else field[i][j] = 0
		}
	}

	collision_flag = 0
	block_flag =1
	gameover_flag = 0
	clear_flag = 0
	move_flag = 0
	time_flag = 0

	block_x_state = block_x = 6
	block_y_state = block_y = 0

	randList()
}

function init2(){
	block_x_state = block_x = 6
	block_y_state = block_y = 0
	block_flag = 1
}

function gameOver(){
	collision(1)
	if(collision_flag != 0)
		gameover_flag = 1
}


function drawWall(){
	var i
	setColor(0xd69a)
	repeat(i = 0,20)
		drawHline(45, i * 15 + 5, 150)
	repeat(i = 0,12)
		drawVline(30 + (i * 15),5,315)
	setColor(0)
	repeat(i = 0,14){
		drawVline(30 + i,0,320)
		drawVline(195 + i,0,320)
		drawHline(45, 305 + i,150)
	}
	repeat(i = 0,5)
		drawHline(45, i ,150)

}

function drawSquare(x,y,color){
	setColor(color)
	fillRect(x,y,14,14)
}

function drawBlock(){
	var i,j
	clearBlock()
	move_flag = 0
	repeat(i = 0,3){
		repeat(j = 0,3){
			if(block[i][j] != 0)
				drawSquare((15 * (j + block_x)) + 1 ,(15 * (i + block_y)) + 6 ,color)
		}
	}
}

function drawField(){
	var i,j
	var color2 = [0xffff,0xffe0,0x07ff,0x901a,0xfd20,0x001f,0x07e0,0xf800]
	repeat(i = 0,19){
		repeat(j = 3,12)
			drawSquare(15 * j + 1,15 * i + 6 ,color2[field[i][j]])
	}
}

function clearBlock(){
	var i,j
	repeat(i = 0,3){
		repeat(j = 0,3){
			if(block[i][j] != 0)
				drawSquare((15 * (j + block_x_state)) + 1 ,(15 * (i + block_y_state)) + 6 ,0xffff)
		}
	}
	block_x_state = block_x
	block_y_state = block_y
}

function makeBlock(){
	if(block_flag ==1){
		block = blocks[block_state]
		color = colors[block_state]
		block_flag = 0
		if(block_state == 6){
			randList()
			block_state = 0
		}
		block_state++
	}
}

function randList(){ //blocksの順番をランダムに入れ替える
	var a,b,c
	times(10){
		a = random() * 7
		b = random() * 7

		c = blocks[a]
		blocks[a] = blocks[b]
		blocks[b] = c

		c = colors[a]
		colors[a] = colors[b]
		colors[b] = c

	}
}



function saveBlock(){
	var x,y
	repeat(y=0,3){
		repeat(x=0,3)
			field[block_y + y][block_x + x] += block[y][x]
	}
}

function fixBlock(){
	var x,y

	collision(3)

	if(collision_flag != 0){
		saveBlock()
		serchLine()
		if(clear_flag == 0)
			init2()	
		time_flag = 0

	}
}

// クリアする列の探索
function serchLine(){
	var i,j

	repeat(i=0,19){
		clear_line_point[i] = 0
		repeat(j=3,12){
			if(field[i][j] == 0){
				clear_line_point[i] = 1
				break
			}
		}
	}

	repeat(i=0,19){
		if(clear_line_point[i] == 0){
			clear_flag = 1
			break
		}
	}
}

//クリア
function clearLine(){
	var i,j
	var remain_line_point = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	var remain_line_index = 0

	repeat(i=0,19){
		if(clear_line_point[i] == 0){
			repeat(j=3,12){
				field[i][j] = 0
				drawSquare((15 * j) + 1 ,(15 * i) + 6 ,0xffff)

			}
		}
	}
	for(i=19;i >= 0;i--){
		if(clear_line_point[i] != 0){
			remain_line_point[remain_line_index] = i
			remain_line_index++
		}
	}
	
	remain_line_index = 0
	for(i=19;i >= 0;i--){
		field[i] = field[remain_line_point[remain_line_index]]
		remain_line_index++
	}

	clear_flag = 0
	init2()
}


function getKey(){
	var x = analogRead(34) , y = analogRead(35)
	if(x == 4095)
		return 1  //上
	else if(x == 0)
		return 3  //下
	else if(y > 3000)
		return 2  //右
	else if(y <1000)
		return 4  //左
	return 0
}

function move(){
	var key = getKey()
	if(key != 0){
		move_flag = 1
		time-=2
	}
	if(key == 1){
		collision(0)
		if(collision_flag == 0)
			turnR()
	}else if(key == 2){
		collision(2)
		if(collision_flag == 0)
			block_x++
	}else if(key == 3){
		collision(3)
		while(collision_flag == 0){
			block_y++
			collision(3)
		}
	}else if(key == 4){
		collision(4)
		if(collision_flag == 0)
			block_x--
	}
}

function turnR(){ //blockを右に回す 
	var i,j
	var state = block
	clearBlock()
	repeat(i=0,3){
		repeat(j=0,3)
			block[i][j] = state[j][3-i]
	}
}

function collision(key){
	var x,y,i,j
	collision_flag = 0
	repeat(y = 0,3){
		repeat(x = 0,3){
			if(key == 0){ //回転後
				if(block[x][3 - y] != 0){
					if(field[block_y + y][block_x + x] != 0)
						collision_flag = 1
				}
			}else if(block[y][x] != 0){
				if(key == 1){//当たり判定（初期位置)
					if(field[block_y + y][block_x + x] != 0)
						collision_flag = 1
				}else if(key == 2){//当たり判定（右)
					if(field[block_y + y][block_x + (x + 1)] != 0)
						collision_flag = 1
				}else if(key == 3){//当たり判定（下)
					if(field[block_y + (y + 1)][block_x + x] != 0)
						collision_flag = 1
				}else if(key == 4){//当たり判定（左)
					if(field[block_y + y][block_x + (x - 1)] != 0)
						collision_flag = 1
				}
			}
		}
	}
}

function fall(){
	if(block_flag == 0){
		block_y++
		move_flag = 1
	}
}


function tetris(){
	init()
	drawWall()
	while(gameover_flag == 0){
		if(clear_flag == 0){
			if(time_flag == 0){
				makeBlock()
				drawBlock()
				time_flag = 1
				delay(100)
			}else{
				makeBlock()
				gameOver()
				move()
				if(move_flag == 1)
					drawBlock()
				fixBlock()
				time += 10
				if(time >= 50){
					fall()
					time = 0
				}
			}
		}else{
			clearLine()
			drawField()
		}
	}
	drawBlock()

}

tetris()


